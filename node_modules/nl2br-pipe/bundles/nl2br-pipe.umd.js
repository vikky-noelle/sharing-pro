(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('nl2br-pipe', ['exports', '@angular/core', '@angular/platform-browser'], factory) :
    (factory((global['nl2br-pipe'] = {}),global.ng.core,global.ng.platformBrowser));
}(this, (function (exports,core,platformBrowser) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Nl2BrPipe = /** @class */ (function () {
        function Nl2BrPipe(sanitizer) {
            this.sanitizer = sanitizer;
        }
        /**
         * @param {?} value
         * @param {?=} sanitizeBeforehand
         * @return {?}
         */
        Nl2BrPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} sanitizeBeforehand
         * @return {?}
         */
            function (value, sanitizeBeforehand) {
                if (typeof value !== 'string') {
                    return value;
                }
                /** @type {?} */
                var result;
                /** @type {?} */
                var textParsed = value.replace(/(?:\r\n|\r|\n)/g, '<br />');
                if (!core.VERSION || core.VERSION.major === '2') {
                    result = this.sanitizer.bypassSecurityTrustHtml(textParsed);
                }
                else if (sanitizeBeforehand) {
                    result = this.sanitizer.sanitize(core.SecurityContext.HTML, textParsed);
                }
                else {
                    result = textParsed;
                }
                return result;
            };
        Nl2BrPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'nl2br'
                    },] }
        ];
        /** @nocollapse */
        Nl2BrPipe.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer }
            ];
        };
        return Nl2BrPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Nl2BrPipeModule = /** @class */ (function () {
        function Nl2BrPipeModule() {
        }
        Nl2BrPipeModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [Nl2BrPipe],
                        imports: [],
                        exports: [Nl2BrPipe]
                    },] }
        ];
        return Nl2BrPipeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.Nl2BrPipeModule = Nl2BrPipeModule;
    exports.Nl2BrPipe = Nl2BrPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=nl2br-pipe.umd.js.map