/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe, SecurityContext, VERSION } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
var Nl2BrPipe = /** @class */ (function () {
    function Nl2BrPipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} value
     * @param {?=} sanitizeBeforehand
     * @return {?}
     */
    Nl2BrPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} sanitizeBeforehand
     * @return {?}
     */
    function (value, sanitizeBeforehand) {
        if (typeof value !== 'string') {
            return value;
        }
        /** @type {?} */
        var result;
        /** @type {?} */
        var textParsed = value.replace(/(?:\r\n|\r|\n)/g, '<br />');
        if (!VERSION || VERSION.major === '2') {
            result = this.sanitizer.bypassSecurityTrustHtml(textParsed);
        }
        else if (sanitizeBeforehand) {
            result = this.sanitizer.sanitize(SecurityContext.HTML, textParsed);
        }
        else {
            result = textParsed;
        }
        return result;
    };
    Nl2BrPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'nl2br'
                },] }
    ];
    /** @nocollapse */
    Nl2BrPipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    return Nl2BrPipe;
}());
export { Nl2BrPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Nl2BrPipe.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmwyYnIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25sMmJyLXBpcGUvIiwic291cmNlcyI6WyJsaWIvbmwyYnIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFekQ7SUFLRSxtQkFBb0IsU0FBdUI7UUFBdkIsY0FBUyxHQUFULFNBQVMsQ0FBYztJQUMzQyxDQUFDOzs7Ozs7SUFFRCw2QkFBUzs7Ozs7SUFBVCxVQUFVLEtBQWEsRUFBRSxrQkFBNEI7UUFDbkQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDN0IsT0FBTyxLQUFLLENBQUM7U0FDZDs7WUFDRyxNQUFXOztZQUNULFVBQVUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQztRQUU3RCxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssR0FBRyxFQUFFO1lBQ3JDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzdEO2FBQU0sSUFBSSxrQkFBa0IsRUFBRTtZQUM3QixNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNwRTthQUFNO1lBQ0wsTUFBTSxHQUFHLFVBQVUsQ0FBQztTQUNyQjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O2dCQXhCRixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLE9BQU87aUJBQ2Q7Ozs7Z0JBSlEsWUFBWTs7SUE0QnJCLGdCQUFDO0NBQUEsQUExQkQsSUEwQkM7U0F2QlksU0FBUzs7Ozs7O0lBRVIsOEJBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgU2VjdXJpdHlDb250ZXh0LCBWRVJTSU9OIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuQFBpcGUoe1xuICBuYW1lOiAnbmwyYnInXG59KVxuZXhwb3J0IGNsYXNzIE5sMkJyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcbiAgfVxuXG4gIHRyYW5zZm9ybSh2YWx1ZTogc3RyaW5nLCBzYW5pdGl6ZUJlZm9yZWhhbmQ/OiBib29sZWFuKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0OiBhbnk7XG4gICAgY29uc3QgdGV4dFBhcnNlZCA9IHZhbHVlLnJlcGxhY2UoLyg/OlxcclxcbnxcXHJ8XFxuKS9nLCAnPGJyIC8+Jyk7XG5cbiAgICBpZiAoIVZFUlNJT04gfHwgVkVSU0lPTi5tYWpvciA9PT0gJzInKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbCh0ZXh0UGFyc2VkKTtcbiAgICB9IGVsc2UgaWYgKHNhbml0aXplQmVmb3JlaGFuZCkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5zYW5pdGl6ZXIuc2FuaXRpemUoU2VjdXJpdHlDb250ZXh0LkhUTUwsIHRleHRQYXJzZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB0ZXh0UGFyc2VkO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxufVxuIl19