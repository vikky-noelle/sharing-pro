(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-malihu-scrollbar', ['exports', '@angular/core'], factory) :
    (global = global || self, factory(global['ngx-malihu-scrollbar'] = {}, global.ng.core));
}(this, function (exports, core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MalihuScrollbarService = /** @class */ (function () {
        function MalihuScrollbarService(zone) {
            this.zone = zone;
        }
        /**
         * @param {?} element
         * @param {?} options
         * @return {?}
         */
        MalihuScrollbarService.prototype.initScrollbar = /**
         * @param {?} element
         * @param {?} options
         * @return {?}
         */
        function (element, options) {
            /** @type {?} */
            var jQueryElement = this.getElement(element);
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return jQueryElement.mCustomScrollbar(options); }));
            if (jQueryElement.length > 0 && jQueryElement[0].tagName === 'BODY') {
                jQueryElement[0].style.position = 'absolute';
                jQueryElement[0].style.overflow = 'auto';
                jQueryElement[0].style.height = '100vh';
                jQueryElement[0].style.width = '100vw';
            }
        };
        /**
         * @param {?} element
         * @param {?} parameter
         * @param {?} options
         * @return {?}
         */
        MalihuScrollbarService.prototype.scrollTo = /**
         * @param {?} element
         * @param {?} parameter
         * @param {?} options
         * @return {?}
         */
        function (element, parameter, options) {
            var _this = this;
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return _this.getElement(element).mCustomScrollbar('scrollTo', parameter, options); }));
        };
        /**
         * @param {?} element
         * @return {?}
         */
        MalihuScrollbarService.prototype.update = /**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            var _this = this;
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return _this.getElement(element).mCustomScrollbar('update'); }));
        };
        /**
         * @param {?} element
         * @return {?}
         */
        MalihuScrollbarService.prototype.stop = /**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            var _this = this;
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return _this.getElement(element).mCustomScrollbar('stop'); }));
        };
        /**
         * @param {?} element
         * @param {?=} reset
         * @return {?}
         */
        MalihuScrollbarService.prototype.disable = /**
         * @param {?} element
         * @param {?=} reset
         * @return {?}
         */
        function (element, reset) {
            var _this = this;
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return _this.getElement(element).mCustomScrollbar('disable', !!reset); }));
        };
        /**
         * @param {?} element
         * @return {?}
         */
        MalihuScrollbarService.prototype.destroy = /**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            var _this = this;
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return _this.getElement(element).mCustomScrollbar('destroy'); }));
        };
        /**
         * @private
         * @param {?} element
         * @return {?}
         */
        MalihuScrollbarService.prototype.getElement = /**
         * @private
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (typeof element === 'string') {
                return $(element);
            }
            if (typeof element === 'object' && element instanceof HTMLElement) {
                return $(element);
            }
            if (element instanceof jQuery || 'jquery' in Object(element)) {
                return element;
            }
            throw Error("Unsupported element type in MalihuScrollbarService: " + element);
        };
        MalihuScrollbarService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        MalihuScrollbarService.ctorParameters = function () { return [
            { type: core.NgZone }
        ]; };
        return MalihuScrollbarService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Malihu Custom Scrollbar directive
     * Use this reference link for options definition
     * http://manos.malihu.gr/jquery-custom-content-scroller/
     */
    var MalihuScrollbarDirective = /** @class */ (function () {
        function MalihuScrollbarDirective(elementRef, mScrollbarService) {
            this.elementRef = elementRef;
            this.mScrollbarService = mScrollbarService;
        }
        /**
         * @return {?}
         */
        MalihuScrollbarDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.initElements();
            this.initScrollbar();
        };
        /**
         * @return {?}
         */
        MalihuScrollbarDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroyScrollbar();
        };
        /**
         * @return {?}
         */
        MalihuScrollbarDirective.prototype.initElements = /**
         * @return {?}
         */
        function () {
            this.scrollableElement = !!this.scrollElementId
                ? $("#" + this.scrollElementId)
                : $(this.elementRef.nativeElement);
            if (!!this.scrollElementId && this.scrollableElement.length === 0) {
                console.error("MalihuScrollbarDirective cannot find element with provided scrollElementId: " + this.scrollElementId + ".");
            }
        };
        /**
         * @return {?}
         */
        MalihuScrollbarDirective.prototype.initScrollbar = /**
         * @return {?}
         */
        function () {
            this.mScrollbarService.initScrollbar(this.scrollableElement, this.scrollbarOptions);
        };
        /**
         * @return {?}
         */
        MalihuScrollbarDirective.prototype.destroyScrollbar = /**
         * @return {?}
         */
        function () {
            try {
                this.mScrollbarService.destroy(this.scrollableElement);
            }
            catch (error) {
                // workaround for malihu-custom-scrollbar-plugin issue:
                // Cannot read property 'autoUpdate' of undefined
                // https://github.com/malihu/malihu-custom-scrollbar-plugin/issues/392
            }
        };
        MalihuScrollbarDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[MalihuScrollbar], [malihu-scrollbar]',
                    },] }
        ];
        /** @nocollapse */
        MalihuScrollbarDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: MalihuScrollbarService }
        ]; };
        MalihuScrollbarDirective.propDecorators = {
            scrollElementId: [{ type: core.Input }],
            scrollbarOptions: [{ type: core.Input }]
        };
        return MalihuScrollbarDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MalihuScrollbarModule = /** @class */ (function () {
        function MalihuScrollbarModule() {
        }
        /**
         * @return {?}
         */
        MalihuScrollbarModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: MalihuScrollbarModule,
                providers: [MalihuScrollbarService],
            };
        };
        /**
         * @return {?}
         */
        MalihuScrollbarModule.forChild = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: MalihuScrollbarModule,
            };
        };
        MalihuScrollbarModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: [MalihuScrollbarDirective],
                        declarations: [MalihuScrollbarDirective],
                    },] }
        ];
        return MalihuScrollbarModule;
    }());

    exports.MalihuScrollbarDirective = MalihuScrollbarDirective;
    exports.MalihuScrollbarModule = MalihuScrollbarModule;
    exports.MalihuScrollbarService = MalihuScrollbarService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-malihu-scrollbar.umd.js.map
