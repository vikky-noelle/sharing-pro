/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
import { MalihuScrollbarService } from './malihu-scrollbar.service';
/**
 * Malihu Custom Scrollbar directive
 * Use this reference link for options definition
 * http://manos.malihu.gr/jquery-custom-content-scroller/
 */
export class MalihuScrollbarDirective {
    /**
     * @param {?} elementRef
     * @param {?} mScrollbarService
     */
    constructor(elementRef, mScrollbarService) {
        this.elementRef = elementRef;
        this.mScrollbarService = mScrollbarService;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initElements();
        this.initScrollbar();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyScrollbar();
    }
    /**
     * @return {?}
     */
    initElements() {
        this.scrollableElement = !!this.scrollElementId
            ? $(`#${this.scrollElementId}`)
            : $(this.elementRef.nativeElement);
        if (!!this.scrollElementId && this.scrollableElement.length === 0) {
            console.error(`MalihuScrollbarDirective cannot find element with provided scrollElementId: ${this.scrollElementId}.`);
        }
    }
    /**
     * @return {?}
     */
    initScrollbar() {
        this.mScrollbarService.initScrollbar(this.scrollableElement, this.scrollbarOptions);
    }
    /**
     * @return {?}
     */
    destroyScrollbar() {
        try {
            this.mScrollbarService.destroy(this.scrollableElement);
        }
        catch (error) {
            // workaround for malihu-custom-scrollbar-plugin issue:
            // Cannot read property 'autoUpdate' of undefined
            // https://github.com/malihu/malihu-custom-scrollbar-plugin/issues/392
        }
    }
}
MalihuScrollbarDirective.decorators = [
    { type: Directive, args: [{
                selector: '[MalihuScrollbar], [malihu-scrollbar]',
            },] }
];
/** @nocollapse */
MalihuScrollbarDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: MalihuScrollbarService }
];
MalihuScrollbarDirective.propDecorators = {
    scrollElementId: [{ type: Input }],
    scrollbarOptions: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MalihuScrollbarDirective.prototype.scrollElementId;
    /** @type {?} */
    MalihuScrollbarDirective.prototype.scrollbarOptions;
    /** @type {?} */
    MalihuScrollbarDirective.prototype.scrollableElement;
    /**
     * @type {?}
     * @private
     */
    MalihuScrollbarDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    MalihuScrollbarDirective.prototype.mScrollbarService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFsaWh1LXNjcm9sbGJhci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWFsaWh1LXNjcm9sbGJhci8iLCJzb3VyY2VzIjpbInNyYy9tYWxpaHUtc2Nyb2xsYmFyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN2RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7O0FBVXBFLE1BQU0sT0FBTyx3QkFBd0I7Ozs7O0lBTW5DLFlBQ1UsVUFBc0IsRUFDdEIsaUJBQXlDO1FBRHpDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUF3QjtJQUMvQyxDQUFDOzs7O0lBRUwsZUFBZTtRQUNiLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWU7WUFDN0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUMvQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNqRSxPQUFPLENBQUMsS0FBSyxDQUFDLCtFQUErRSxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztTQUN2SDtJQUNILENBQUM7Ozs7SUFFRCxhQUFhO1FBQ1gsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDdEYsQ0FBQzs7OztJQUVELGdCQUFnQjtRQUNkLElBQUk7WUFDRixJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3hEO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCx1REFBdUQ7WUFDdkQsaURBQWlEO1lBQ2pELHNFQUFzRTtTQUN2RTtJQUNILENBQUM7OztZQTdDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHVDQUF1QzthQUNsRDs7OztZQVZrQyxVQUFVO1lBQ3BDLHNCQUFzQjs7OzhCQVc1QixLQUFLOytCQUNMLEtBQUs7Ozs7SUFETixtREFBaUM7O0lBQ2pDLG9EQUFtRTs7SUFFbkUscURBQTBCOzs7OztJQUd4Qiw4Q0FBOEI7Ozs7O0lBQzlCLHFEQUFpRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNYWxpaHVTY3JvbGxiYXJTZXJ2aWNlIH0gZnJvbSAnLi9tYWxpaHUtc2Nyb2xsYmFyLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIE1hbGlodSBDdXN0b20gU2Nyb2xsYmFyIGRpcmVjdGl2ZVxyXG4gKiBVc2UgdGhpcyByZWZlcmVuY2UgbGluayBmb3Igb3B0aW9ucyBkZWZpbml0aW9uXHJcbiAqIGh0dHA6Ly9tYW5vcy5tYWxpaHUuZ3IvanF1ZXJ5LWN1c3RvbS1jb250ZW50LXNjcm9sbGVyL1xyXG4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbTWFsaWh1U2Nyb2xsYmFyXSwgW21hbGlodS1zY3JvbGxiYXJdJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIE1hbGlodVNjcm9sbGJhckRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgQElucHV0KCkgc2Nyb2xsRWxlbWVudElkOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgc2Nyb2xsYmFyT3B0aW9uczogTUN1c3RvbVNjcm9sbGJhci5DdXN0b21TY3JvbGxiYXJPcHRpb25zO1xyXG5cclxuICBzY3JvbGxhYmxlRWxlbWVudDogSlF1ZXJ5O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgbVNjcm9sbGJhclNlcnZpY2U6IE1hbGlodVNjcm9sbGJhclNlcnZpY2UsXHJcbiAgKSB7IH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgdGhpcy5pbml0RWxlbWVudHMoKTtcclxuICAgIHRoaXMuaW5pdFNjcm9sbGJhcigpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLmRlc3Ryb3lTY3JvbGxiYXIoKTtcclxuICB9XHJcblxyXG4gIGluaXRFbGVtZW50cygpIHtcclxuICAgIHRoaXMuc2Nyb2xsYWJsZUVsZW1lbnQgPSAhIXRoaXMuc2Nyb2xsRWxlbWVudElkXHJcbiAgICAgID8gJChgIyR7dGhpcy5zY3JvbGxFbGVtZW50SWR9YClcclxuICAgICAgOiAkKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcclxuXHJcbiAgICBpZiAoISF0aGlzLnNjcm9sbEVsZW1lbnRJZCAmJiB0aGlzLnNjcm9sbGFibGVFbGVtZW50Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBNYWxpaHVTY3JvbGxiYXJEaXJlY3RpdmUgY2Fubm90IGZpbmQgZWxlbWVudCB3aXRoIHByb3ZpZGVkIHNjcm9sbEVsZW1lbnRJZDogJHt0aGlzLnNjcm9sbEVsZW1lbnRJZH0uYCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbml0U2Nyb2xsYmFyKCkge1xyXG4gICAgdGhpcy5tU2Nyb2xsYmFyU2VydmljZS5pbml0U2Nyb2xsYmFyKHRoaXMuc2Nyb2xsYWJsZUVsZW1lbnQsIHRoaXMuc2Nyb2xsYmFyT3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBkZXN0cm95U2Nyb2xsYmFyKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy5tU2Nyb2xsYmFyU2VydmljZS5kZXN0cm95KHRoaXMuc2Nyb2xsYWJsZUVsZW1lbnQpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgLy8gd29ya2Fyb3VuZCBmb3IgbWFsaWh1LWN1c3RvbS1zY3JvbGxiYXItcGx1Z2luIGlzc3VlOlxyXG4gICAgICAvLyBDYW5ub3QgcmVhZCBwcm9wZXJ0eSAnYXV0b1VwZGF0ZScgb2YgdW5kZWZpbmVkXHJcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYWxpaHUvbWFsaWh1LWN1c3RvbS1zY3JvbGxiYXItcGx1Z2luL2lzc3Vlcy8zOTJcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19