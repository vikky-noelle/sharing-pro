/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
import { MalihuScrollbarService } from './malihu-scrollbar.service';
/**
 * Malihu Custom Scrollbar directive
 * Use this reference link for options definition
 * http://manos.malihu.gr/jquery-custom-content-scroller/
 */
var MalihuScrollbarDirective = /** @class */ (function () {
    function MalihuScrollbarDirective(elementRef, mScrollbarService) {
        this.elementRef = elementRef;
        this.mScrollbarService = mScrollbarService;
    }
    /**
     * @return {?}
     */
    MalihuScrollbarDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initElements();
        this.initScrollbar();
    };
    /**
     * @return {?}
     */
    MalihuScrollbarDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyScrollbar();
    };
    /**
     * @return {?}
     */
    MalihuScrollbarDirective.prototype.initElements = /**
     * @return {?}
     */
    function () {
        this.scrollableElement = !!this.scrollElementId
            ? $("#" + this.scrollElementId)
            : $(this.elementRef.nativeElement);
        if (!!this.scrollElementId && this.scrollableElement.length === 0) {
            console.error("MalihuScrollbarDirective cannot find element with provided scrollElementId: " + this.scrollElementId + ".");
        }
    };
    /**
     * @return {?}
     */
    MalihuScrollbarDirective.prototype.initScrollbar = /**
     * @return {?}
     */
    function () {
        this.mScrollbarService.initScrollbar(this.scrollableElement, this.scrollbarOptions);
    };
    /**
     * @return {?}
     */
    MalihuScrollbarDirective.prototype.destroyScrollbar = /**
     * @return {?}
     */
    function () {
        try {
            this.mScrollbarService.destroy(this.scrollableElement);
        }
        catch (error) {
            // workaround for malihu-custom-scrollbar-plugin issue:
            // Cannot read property 'autoUpdate' of undefined
            // https://github.com/malihu/malihu-custom-scrollbar-plugin/issues/392
        }
    };
    MalihuScrollbarDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[MalihuScrollbar], [malihu-scrollbar]',
                },] }
    ];
    /** @nocollapse */
    MalihuScrollbarDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: MalihuScrollbarService }
    ]; };
    MalihuScrollbarDirective.propDecorators = {
        scrollElementId: [{ type: Input }],
        scrollbarOptions: [{ type: Input }]
    };
    return MalihuScrollbarDirective;
}());
export { MalihuScrollbarDirective };
if (false) {
    /** @type {?} */
    MalihuScrollbarDirective.prototype.scrollElementId;
    /** @type {?} */
    MalihuScrollbarDirective.prototype.scrollbarOptions;
    /** @type {?} */
    MalihuScrollbarDirective.prototype.scrollableElement;
    /**
     * @type {?}
     * @private
     */
    MalihuScrollbarDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    MalihuScrollbarDirective.prototype.mScrollbarService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFsaWh1LXNjcm9sbGJhci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWFsaWh1LXNjcm9sbGJhci8iLCJzb3VyY2VzIjpbInNyYy9tYWxpaHUtc2Nyb2xsYmFyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN2RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7O0FBT3BFO0lBU0Usa0NBQ1UsVUFBc0IsRUFDdEIsaUJBQXlDO1FBRHpDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUF3QjtJQUMvQyxDQUFDOzs7O0lBRUwsa0RBQWU7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsOENBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQzs7OztJQUVELCtDQUFZOzs7SUFBWjtRQUNFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWU7WUFDN0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFJLElBQUksQ0FBQyxlQUFpQixDQUFDO1lBQy9CLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVyQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2pFLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUZBQStFLElBQUksQ0FBQyxlQUFlLE1BQUcsQ0FBQyxDQUFDO1NBQ3ZIO0lBQ0gsQ0FBQzs7OztJQUVELGdEQUFhOzs7SUFBYjtRQUNFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7Ozs7SUFFRCxtREFBZ0I7OztJQUFoQjtRQUNFLElBQUk7WUFDRixJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3hEO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCx1REFBdUQ7WUFDdkQsaURBQWlEO1lBQ2pELHNFQUFzRTtTQUN2RTtJQUNILENBQUM7O2dCQTdDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHVDQUF1QztpQkFDbEQ7Ozs7Z0JBVmtDLFVBQVU7Z0JBQ3BDLHNCQUFzQjs7O2tDQVc1QixLQUFLO21DQUNMLEtBQUs7O0lBeUNSLCtCQUFDO0NBQUEsQUE5Q0QsSUE4Q0M7U0EzQ1ksd0JBQXdCOzs7SUFDbkMsbURBQWlDOztJQUNqQyxvREFBbUU7O0lBRW5FLHFEQUEwQjs7Ozs7SUFHeEIsOENBQThCOzs7OztJQUM5QixxREFBaUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWFsaWh1U2Nyb2xsYmFyU2VydmljZSB9IGZyb20gJy4vbWFsaWh1LXNjcm9sbGJhci5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBNYWxpaHUgQ3VzdG9tIFNjcm9sbGJhciBkaXJlY3RpdmVcclxuICogVXNlIHRoaXMgcmVmZXJlbmNlIGxpbmsgZm9yIG9wdGlvbnMgZGVmaW5pdGlvblxyXG4gKiBodHRwOi8vbWFub3MubWFsaWh1LmdyL2pxdWVyeS1jdXN0b20tY29udGVudC1zY3JvbGxlci9cclxuICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW01hbGlodVNjcm9sbGJhcl0sIFttYWxpaHUtc2Nyb2xsYmFyXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNYWxpaHVTY3JvbGxiYXJEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG4gIEBJbnB1dCgpIHNjcm9sbEVsZW1lbnRJZDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHNjcm9sbGJhck9wdGlvbnM6IE1DdXN0b21TY3JvbGxiYXIuQ3VzdG9tU2Nyb2xsYmFyT3B0aW9ucztcclxuXHJcbiAgc2Nyb2xsYWJsZUVsZW1lbnQ6IEpRdWVyeTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIG1TY3JvbGxiYXJTZXJ2aWNlOiBNYWxpaHVTY3JvbGxiYXJTZXJ2aWNlLFxyXG4gICkgeyB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMuaW5pdEVsZW1lbnRzKCk7XHJcbiAgICB0aGlzLmluaXRTY3JvbGxiYXIoKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5kZXN0cm95U2Nyb2xsYmFyKCk7XHJcbiAgfVxyXG5cclxuICBpbml0RWxlbWVudHMoKSB7XHJcbiAgICB0aGlzLnNjcm9sbGFibGVFbGVtZW50ID0gISF0aGlzLnNjcm9sbEVsZW1lbnRJZFxyXG4gICAgICA/ICQoYCMke3RoaXMuc2Nyb2xsRWxlbWVudElkfWApXHJcbiAgICAgIDogJCh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7XHJcblxyXG4gICAgaWYgKCEhdGhpcy5zY3JvbGxFbGVtZW50SWQgJiYgdGhpcy5zY3JvbGxhYmxlRWxlbWVudC5sZW5ndGggPT09IDApIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgTWFsaWh1U2Nyb2xsYmFyRGlyZWN0aXZlIGNhbm5vdCBmaW5kIGVsZW1lbnQgd2l0aCBwcm92aWRlZCBzY3JvbGxFbGVtZW50SWQ6ICR7dGhpcy5zY3JvbGxFbGVtZW50SWR9LmApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW5pdFNjcm9sbGJhcigpIHtcclxuICAgIHRoaXMubVNjcm9sbGJhclNlcnZpY2UuaW5pdFNjcm9sbGJhcih0aGlzLnNjcm9sbGFibGVFbGVtZW50LCB0aGlzLnNjcm9sbGJhck9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveVNjcm9sbGJhcigpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMubVNjcm9sbGJhclNlcnZpY2UuZGVzdHJveSh0aGlzLnNjcm9sbGFibGVFbGVtZW50KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIC8vIHdvcmthcm91bmQgZm9yIG1hbGlodS1jdXN0b20tc2Nyb2xsYmFyLXBsdWdpbiBpc3N1ZTpcclxuICAgICAgLy8gQ2Fubm90IHJlYWQgcHJvcGVydHkgJ2F1dG9VcGRhdGUnIG9mIHVuZGVmaW5lZFxyXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWFsaWh1L21hbGlodS1jdXN0b20tc2Nyb2xsYmFyLXBsdWdpbi9pc3N1ZXMvMzkyXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==