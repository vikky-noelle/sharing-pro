"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const export_ref_1 = require("./export-ref");
const file_system_engine_host_base_1 = require("./file-system-engine-host-base");
const path_1 = require("path");
const fs_1 = require("fs");
const file_system_utility_1 = require("./file-system-utility");
/**
 * A simple EngineHost that uses a registry of {name => path} to find collections. This can be
 * useful for tooling that want to load generic collections from random places.
 */
class RegistryEngineHost extends file_system_engine_host_base_1.FileSystemEngineHostBase {
    constructor() {
        super(...arguments);
        this._registry = new Map();
    }
    registerPath(path) {
        // Read the collection from the path.
        if (fs_1.existsSync(path) && fs_1.statSync(path).isFile()) {
            // Allow path to be fully qualified to a JSON file.
        }
        else if (fs_1.existsSync(path_1.join(path, 'collection.json')) && fs_1.statSync(path).isFile()) {
            // Allow path to point to a directory containing a `collection.json`.
            path = path_1.join(path, 'collection.json');
        }
        else {
            throw new Error(`Invalid path: "${path}".`);
        }
        const json = file_system_utility_1.readJsonFile(path);
        if (!json) {
            throw new Error(`Invalid path for collection: "${path}".`);
        }
        // Validate that the name is not in the registry already (and that the registry does not
        // contain this path under another name.
        const name = json.name;
        const maybePath = this._registry.get(name);
        if (maybePath && maybePath != path) {
            throw new Error(`Collection name "${name}" already registered.`);
        }
        for (const registryPath of this._registry.values()) {
            if (registryPath == path) {
                throw new Error(`Collection path "${path}" already registered under another name.`);
            }
        }
        this._registry.set(name, path);
    }
    removePath(path) {
        for (const [key, p] of this._registry.entries()) {
            if (p == path) {
                this._registry.delete(key);
            }
        }
    }
    removeName(name) {
        this._registry.delete(name);
    }
    _resolveCollectionPath(name) {
        const maybePath = this._registry.get(name);
        return maybePath || null;
    }
    _resolveReferenceString(refString, parentPath) {
        // Use the same kind of export strings as NodeModule.
        const ref = new export_ref_1.ExportStringRef(refString, parentPath);
        return { ref: ref.ref, path: ref.module };
    }
    _transformCollectionDescription(_name, desc) {
        if (!desc.name || !desc.path || !desc.schematics || !desc.version) {
            return null;
        }
        if (typeof desc.schematics != 'object') {
            return null;
        }
        return desc;
    }
    _transformSchematicDescription(_name, _collection, desc) {
        if (!desc.factoryFn || !desc.path || !desc.description) {
            return null;
        }
        return desc;
    }
}
exports.RegistryEngineHost = RegistryEngineHost;
//# sourceMappingURL=data:application/json;base64,