{"remainingRequest":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/@angular/fire/messaging/messaging.js","dependencies":[{"path":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/@angular/fire/messaging/messaging.js","mtime":499162500000},{"path":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1535052364000}],"contextDependencies":[],"result":["import { __decorate } from \"tslib\";\nimport { __metadata } from \"tslib\";\nimport { __param } from \"tslib\";\nimport { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable, empty, from, of, throwError } from 'rxjs';\nimport { mergeMap, catchError, map, switchMap, concat, defaultIfEmpty } from 'rxjs/operators';\nimport { runOutsideAngular } from '@angular/fire';\nimport { FirebaseOptionsToken, FirebaseNameOrConfigToken, _firebaseAppFactory } from '@angular/fire';\nvar AngularFireMessaging = /*@__PURE__*/ (function () {\n    function AngularFireMessaging(options, nameOrConfig, platformId, zone) {\n        var _this = this;\n        if (isPlatformBrowser(platformId)) {\n            var requireMessaging = from(import('firebase/messaging'));\n            this.messaging = requireMessaging.pipe(map(function () { return _firebaseAppFactory(options, nameOrConfig); }), map(function (app) { return app.messaging(); }), runOutsideAngular(zone));\n            this.requestPermission = this.messaging.pipe(switchMap(function (messaging) { return messaging.requestPermission(); }), runOutsideAngular(zone));\n        }\n        else {\n            this.messaging = empty();\n            this.requestPermission = throwError('Not available on server platform.');\n        }\n        this.getToken = this.messaging.pipe(switchMap(function (messaging) { return messaging.getToken(); }), defaultIfEmpty(null), runOutsideAngular(zone));\n        var tokenChanges = this.messaging.pipe(switchMap(function (messaging) { return new Observable(messaging.onTokenRefresh.bind(messaging)).pipe(switchMap(function () { return messaging.getToken(); })); }), runOutsideAngular(zone));\n        this.tokenChanges = this.getToken.pipe(concat(tokenChanges));\n        this.messages = this.messaging.pipe(switchMap(function (messaging) { return new Observable(messaging.onMessage.bind(messaging)); }), runOutsideAngular(zone));\n        this.requestToken = this.requestPermission.pipe(catchError(function () { return of(null); }), mergeMap(function () { return _this.tokenChanges; }));\n        this.deleteToken = function (token) { return _this.messaging.pipe(switchMap(function (messaging) { return messaging.deleteToken(token); }), defaultIfEmpty(false), runOutsideAngular(zone)); };\n    }\n    AngularFireMessaging = __decorate([\n        __param(0, Inject(FirebaseOptionsToken)),\n        __param(1, Optional()), __param(1, Inject(FirebaseNameOrConfigToken)),\n        __param(2, Inject(PLATFORM_ID))\n    ], AngularFireMessaging);\n    return AngularFireMessaging;\n}());\nexport { AngularFireMessaging };\n//# sourceMappingURL=messaging.js.map\n",null]}