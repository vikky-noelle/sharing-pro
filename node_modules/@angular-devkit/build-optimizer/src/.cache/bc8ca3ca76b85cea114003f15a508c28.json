{"remainingRequest":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/ng-masonry-grid/ng-masonry-grid.umd.js","dependencies":[{"path":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/ng-masonry-grid/ng-masonry-grid.umd.js","mtime":1562047745130},{"path":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1562047738932},{"path":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1562047730185}],"contextDependencies":[],"result":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs')) :\n        typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'rxjs'], factory) :\n            (factory((global['ng-masonry-grid'] = {}), global.core, global.common, global.rxjs));\n}(this, (function (exports, core, common, rxjs) {\n    'use strict';\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /**\n     * Shailendra Kumar <shailu.snist@gmail.com>\n     * @ignore\n     */\n    var NgMasonryGridService = /** @class */ /*@__PURE__*/ (function () {\n        function NgMasonryGridService(_platformId) {\n            this._platformId = _platformId;\n            this.items = [];\n            this.itemsCount = 0;\n            this.itemsRenderedCount = 0;\n            this.isAnimate = false;\n            this.docElem = window.document.documentElement;\n            /**\n             * Default animation options of grid items on scroll\n             */\n            this.animationDefaults = {\n                animationEffect: 'effect-1',\n                // default animation effect-1\n                // Minimum and a maximum duration of the animation (random value is chosen)\n                minDuration: 0,\n                maxDuration: 0,\n                // The viewportFactor defines how much of the appearing item has to be visible in order to trigger the animation\n                // if we'd use a value of 0, this would mean that it would add the animation class as soon as the item is in the viewport.\n                // If we were to use the value of 1, the animation would only be triggered when we see all of the item in the viewport (100% of it)\n                viewportFactor: 0\n            };\n            /**\n             * Default masonry options\n             */\n            this.masonryDefaults = {\n                // Set default itemSelector: mandatory\n                itemSelector: '[ng-masonry-grid-item], ng-masonry-grid-item, [ng-masonry-grid-item].animate, ng-masonry-grid-item.animate',\n                initLayout: false,\n                addStatus: 'append' // 'prepend' or 'add' or 'reorder'\n            };\n            this._onScrollHandler = this._onScrollFn.bind(this);\n            this._onResizeHandler = this._resizeHandler.bind(this);\n        }\n        /**\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.getViewportH = /**\n         * @return {?}\n         */\n            function () {\n                /** @type {?} */\n                var client = this.docElem['clientHeight'];\n                /** @type {?} */\n                var inner = window['innerHeight'];\n                if (client < inner) {\n                    return inner;\n                }\n                else {\n                    return client;\n                }\n            };\n        /**\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.scrollY = /**\n         * @return {?}\n         */\n            function () {\n                return window.pageYOffset || this.docElem.scrollTop;\n            };\n        /**\n         * @param {?} el\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.getOffset = /**\n         * @param {?} el\n         * @return {?}\n         */\n            function (el) {\n                /** @type {?} */\n                var offsetTop = 0;\n                /** @type {?} */\n                var offsetLeft = 0;\n                do {\n                    if (!isNaN(el.offsetTop)) {\n                        offsetTop += el.offsetTop;\n                    }\n                    if (!isNaN(el.offsetLeft)) {\n                        offsetLeft += el.offsetLeft;\n                    }\n                } while (el = el.offsetParent);\n                return {\n                    top: offsetTop,\n                    left: offsetLeft\n                };\n            };\n        /**\n         * @param {?} el\n         * @param {?=} h\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.inViewport = /**\n         * @param {?} el\n         * @param {?=} h\n         * @return {?}\n         */\n            function (el, h) {\n                if (h === void 0) {\n                    h = 0;\n                }\n                /** @type {?} */\n                var elH = el.offsetHeight;\n                /** @type {?} */\n                var scrolled = this.scrollY();\n                /** @type {?} */\n                var viewed = scrolled + this.getViewportH();\n                /** @type {?} */\n                var elTop = this.getOffset(el).top;\n                /** @type {?} */\n                var elBottom = elTop + elH;\n                // if 0, the element is considered in the viewport as soon as it enters.\n                // if 1, the element is considered in the viewport only when it's fully inside\n                // value in percentage (1 >= h >= 0)\n                // h = h || 0;\n                return (elTop + elH * h) <= viewed && (elBottom - elH * h) >= scrolled;\n            };\n        /**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.extend = /**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n            function (a, b) {\n                for (var key in b) {\n                    if (b.hasOwnProperty(key)) {\n                        a[key] = b[key];\n                    }\n                }\n                return a;\n            };\n        /**\n         * Initialize and extend all options\n         * @param {?} el\n         * @param {?} masonryOptions\n         * @param {?=} useAnimation\n         * @param {?=} animationOptions\n         * @param {?=} useImagesLoaded\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.init = /**\n         * Initialize and extend all options\n         * @param {?} el\n         * @param {?} masonryOptions\n         * @param {?=} useAnimation\n         * @param {?=} animationOptions\n         * @param {?=} useImagesLoaded\n         * @return {?}\n         */\n            function (el, masonryOptions, useAnimation, animationOptions, useImagesLoaded) {\n                this.useAnimation = useAnimation;\n                this.el = el;\n                this.isAnimate = this.useAnimation || (animationOptions ? true : false);\n                this.useImagesLoaded = useImagesLoaded;\n                this.masonryOptions = this.extend(this.masonryDefaults, masonryOptions);\n                this.animationOptions = this.extend(this.animationDefaults, animationOptions);\n                return this._init();\n            };\n        /**\n         * @param {?} _element\n         * @param {?} options\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.initializeMasonry = /**\n         * @param {?} _element\n         * @param {?} options\n         * @return {?}\n         */\n            function (_element, options) {\n                /** @type {?} */\n                var Masonry = require('masonry-layout');\n                return new Masonry(_element, options);\n            };\n        /**\n         * @return {?}\n         */\n        NgMasonryGridService.prototype._init = /**\n         * @return {?}\n         */\n            function () {\n                if (this.isAnimate) {\n                    // add animation effect\n                    this.el.classList.add(this.animationOptions.animationEffect);\n                }\n                // get imagesloaded libary instance\n                if (this.useImagesLoaded) {\n                    this.imagesLoaded = require('imagesloaded');\n                }\n                // check if browser and then intialize Masonry\n                if (common.isPlatformBrowser(this._platformId)) {\n                    return this._initMasonry();\n                }\n                return null;\n            };\n        /**\n         * @return {?}\n         */\n        NgMasonryGridService.prototype._initMasonry = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                // initialize masonry\n                this._msnry = this.initializeMasonry(this.el, this.masonryOptions);\n                // use animation options if useAnimation is true\n                if (this.isAnimate && this._msnry) {\n                    // animate on scroll the items inside the viewport\n                    window.addEventListener('scroll', this._onScrollHandler, false);\n                    window.addEventListener('resize', this._onResizeHandler, false);\n                    /**\n                           * Remove scroll animations to remove conflicts between Masonry Transitions and Scroll Animations\n                           */\n                    this._msnry.on('layoutComplete', function (items) {\n                        Array.prototype.slice.call(_this.el.children).forEach(function (element) {\n                            element.classList.remove('animate');\n                        });\n                    });\n                    this._msnry.on('removeComplete', function (items) {\n                        Array.prototype.slice.call(_this.el.children).forEach(function (element) {\n                            element.classList.remove('animate');\n                        });\n                        _this._msnry.layout();\n                    });\n                }\n                return this._msnry;\n            };\n        /**\n         * @return {?}\n         */\n        NgMasonryGridService.prototype._onScrollFn = /**\n         * @return {?}\n         */\n            function () {\n                /** @type {?} */\n                var self = this;\n                if (!this.didScroll) {\n                    this.didScroll = true;\n                    setTimeout(function () { self._scrollPage(); }, 100);\n                }\n            };\n        /**\n         * @return {?}\n         */\n        NgMasonryGridService.prototype._scrollPage = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                /** @type {?} */\n                var self = this;\n                /** @type {?} */\n                var items = this._msnry.items.map(function (item) { return item.element; });\n                if (items.length) {\n                    items.forEach(function (el, i) {\n                        if (_this.inViewport(el, self.animationOptions.viewportFactor)) {\n                            /** @type {?} */\n                            var perspY = _this.scrollY() + _this.getViewportH() / 2;\n                            self.el.style.WebkitPerspectiveOrigin = '50% ' + perspY + 'px';\n                            self.el.style.MozPerspectiveOrigin = '50% ' + perspY + 'px';\n                            self.el.style.perspectiveOrigin = '50% ' + perspY + 'px';\n                            if (self.animationOptions.minDuration && self.animationOptions.maxDuration) {\n                                /** @type {?} */\n                                var randDuration = (Math.random() * (self.animationOptions.maxDuration - self.animationOptions.minDuration)\n                                    + self.animationOptions.minDuration) + 's';\n                                el.style.WebkitAnimationDuration = randDuration;\n                                el.style.MozAnimationDuration = randDuration;\n                                el.style.animationDuration = randDuration;\n                            }\n                            el.classList.add('animate');\n                            // }, 25 );\n                        }\n                        else {\n                            el.classList.remove('animate');\n                        }\n                    });\n                }\n                this.didScroll = false;\n            };\n        /**\n         * @return {?}\n         */\n        NgMasonryGridService.prototype._resizeHandler = /**\n         * @return {?}\n         */\n            function () {\n                /** @type {?} */\n                var self = this;\n                Array.prototype.slice.call(this.el.children).forEach(function (element) {\n                    element.classList.remove('animate');\n                });\n                /**\n                 * @return {?}\n                 */\n                function delayed() {\n                    self._scrollPage();\n                    self.resizeTimeout = null;\n                }\n                if (this.resizeTimeout) {\n                    clearTimeout(this.resizeTimeout);\n                }\n                this.resizeTimeout = setTimeout(delayed, 500);\n            };\n        /**\n         * Check if total grid items are redered in the DOM\n         * @return {?}\n         */\n        NgMasonryGridService.prototype._checkTotalRendered = /**\n         * Check if total grid items are redered in the DOM\n         * @return {?}\n         */\n            function () {\n                ++this.itemsRenderedCount;\n                if (this.itemsRenderedCount === this.itemsCount) {\n                    window.removeEventListener('scroll', this._onScrollHandler, false);\n                }\n            };\n        /**\n         * On Destroy remove Scroll and Resize event Listeners\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.onDestory = /**\n         * On Destroy remove Scroll and Resize event Listeners\n         * @return {?}\n         */\n            function () {\n                window.removeEventListener('scroll', this._onScrollHandler, false);\n                window.removeEventListener('resize', this._onResizeHandler, false);\n            };\n        /**\n         * Remove scroll animations\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.removeAnimation = /**\n         * Remove scroll animations\n         * @return {?}\n         */\n            function () {\n                if (this.isAnimate) {\n                    Array.prototype.slice.call(this.el.children).forEach(function (element) {\n                        element.classList.remove('animate');\n                    });\n                }\n            };\n        /**\n         * Add Each grid item to Masonry based on Masony addStatus property\n         * @param {?} element Element - Grid item\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.add = /**\n         * Add Each grid item to Masonry based on Masony addStatus property\n         * @param {?} element Element - Grid item\n         * @return {?}\n         */\n            function (element) {\n                var _this = this;\n                /** @type {?} */\n                var addStatus = this.masonryOptions.addStatus.toLowerCase();\n                // set margin bottom of gutter value.\n                if (this.masonryOptions.gutter) {\n                    element.style.marginBottom = this.masonryOptions.gutter + 'px';\n                }\n                if (this.el.hasChildNodes() && this.el.contains(element)) {\n                    this.el.removeChild(element);\n                }\n                if (this.useImagesLoaded) {\n                    setTimeout(function () {\n                        _this.imagesLoaded(element, function (instance) {\n                            ++_this.itemsRenderedCount;\n                            _this.items.push(element);\n                            // append or prepend based on masonry option\n                            if (addStatus === 'prepend') {\n                                if (_this._msnry.items.length !== 0) {\n                                    _this.el.insertBefore(element, _this._msnry.items[0].element);\n                                }\n                                else {\n                                    _this.el.appendChild(element);\n                                }\n                            }\n                            else if (addStatus === 'append') {\n                                _this.el.appendChild(element);\n                            }\n                            else {\n                                _this.el.appendChild(element);\n                            }\n                            setTimeout(function () {\n                                if (addStatus === 'prepend') {\n                                    if (_this._msnry.items.length !== 0) {\n                                        _this._msnry.prepended(element);\n                                    }\n                                    else {\n                                        _this._msnry.appended(element);\n                                    }\n                                }\n                                else if (addStatus === 'append') {\n                                    _this._msnry.appended(element);\n                                }\n                                else {\n                                    _this._msnry.addItems(element);\n                                }\n                                _this._msnry.layout();\n                            }, 0);\n                        });\n                    }, 0);\n                }\n                else {\n                    setTimeout(function () {\n                        ++_this.itemsRenderedCount;\n                        _this.items.push(element);\n                        if (addStatus === 'prepend') {\n                            if (_this._msnry.items.length !== 0) {\n                                _this.el.insertBefore(element, _this._msnry.items[0].element);\n                                // this._msnry.prepended(itemElem);\n                            }\n                            else {\n                                _this.el.appendChild(element);\n                                // this._msnry.appended(itemElem);\n                            }\n                        }\n                        else if (addStatus === 'append') {\n                            _this.el.appendChild(element);\n                            // this._msnry.appended(itemElem);\n                        }\n                        else {\n                            _this.el.appendChild(element);\n                            // this._msnry.addItems(itemElem);\n                        }\n                        setTimeout(function () {\n                            if (addStatus === 'prepend') {\n                                if (_this._msnry.items.length !== 0) {\n                                    _this._msnry.prepended(element);\n                                }\n                                else {\n                                    _this._msnry.appended(element);\n                                }\n                            }\n                            else if (addStatus === 'append') {\n                                _this._msnry.appended(element);\n                            }\n                            else {\n                                _this._msnry.addItems(element);\n                            }\n                            _this._msnry.layout();\n                        }, 50);\n                    }, 0);\n                }\n            };\n        /**\n         * TODO: reorder masonry items on load\n         * @param {?} element\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.addOrderItem = /**\n         * TODO: reorder masonry items on load\n         * @param {?} element\n         * @return {?}\n         */\n            function (element) {\n                var _this = this;\n                /** @type {?} */\n                var addStatus = this.masonryOptions.addStatus.toLowerCase();\n                // set margin bottom of gutter value.\n                if (this.masonryOptions.gutter) {\n                    element.style.marginBottom = this.masonryOptions.gutter + 'px';\n                }\n                if (this.useImagesLoaded) {\n                    setTimeout(function () {\n                        _this.imagesLoaded(element, function (instance) {\n                        });\n                    }, 0);\n                }\n                else {\n                    setTimeout(function () {\n                        if (addStatus === 'prepend') {\n                            if (_this._msnry.items.length !== 0) {\n                                _this.el.insertBefore(element, _this._msnry.items[0].element);\n                                // this._msnry.prepended(element);\n                            }\n                            else {\n                                _this.el.appendChild(element);\n                                // this._msnry.appended(element);\n                            }\n                        }\n                        else if (addStatus === 'append') {\n                            _this.el.appendChild(element);\n                            // this._msnry.appended(element);\n                        }\n                        else {\n                            _this.el.appendChild(element);\n                            // this._msnry.addItems(element);\n                        }\n                        setTimeout(function () {\n                            if (_this.itemsRenderedCount === _this.itemsCount) {\n                                if (addStatus === 'prepend') {\n                                    if (_this._msnry.items.length !== 0) {\n                                        _this._msnry.prepended(element);\n                                        _this._msnry.layout();\n                                    }\n                                    else {\n                                        _this._msnry.appended(element);\n                                        _this._msnry.layout();\n                                    }\n                                }\n                                else if (addStatus === 'append') {\n                                    _this._msnry.appended(element);\n                                    _this._msnry.layout();\n                                }\n                                else {\n                                    _this._msnry.addItems(element);\n                                    _this._msnry.layout();\n                                }\n                            }\n                        }, 500);\n                    }, 0);\n                }\n            };\n        /**\n         * Re order Masonry items to original order\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.reorderMasonryItems = /**\n         * Re order Masonry items to original order\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                if (this.itemsRenderedCount === this.itemsCount) {\n                    /** @type {?} */\n                    var reorderItems_1 = this.items.sort(function (a, b) {\n                        return a.dataset.count - b.dataset.count;\n                    });\n                    while (this.el.hasChildNodes()) {\n                        this.el.removeChild(this.el.lastChild);\n                    }\n                    setTimeout(function () {\n                        reorderItems_1.forEach(function (item) {\n                            _this.el.appendChild(item);\n                            _this._msnry.appended(item);\n                        });\n                        if (_this._msnry) {\n                            _this._msnry.reloadItems();\n                            _this._msnry.layout();\n                        }\n                    }, 100);\n                }\n            };\n        /**\n         * Set add status to Masonry before adding or appending\n         * @param {?} value 'append' or 'prepend' or 'add'\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.setAddStatus = /**\n         * Set add status to Masonry before adding or appending\n         * @param {?} value 'append' or 'prepend' or 'add'\n         * @return {?}\n         */\n            function (value) {\n                this.masonryOptions.addStatus = value;\n            };\n        /**\n         * Remove grid item from Masonry\n         * @param {?} item Element: Removed Grid Item DOM\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.removeItem = /**\n         * Remove grid item from Masonry\n         * @param {?} item Element: Removed Grid Item DOM\n         * @return {?}\n         */\n            function (item) {\n                var _this = this;\n                this.removeAnimation();\n                if (item) {\n                    item.classList.remove('animate');\n                    /** @type {?} */\n                    var obsv = rxjs.Observable.create(function (observer) {\n                        /** @type {?} */\n                        var count = item.getAttribute('data-count');\n                        /** @type {?} */\n                        var index = _this._msnry.items.findIndex(function (masonryItem) {\n                            return masonryItem.element.getAttribute('data-count') === count;\n                        });\n                        setTimeout(function () {\n                            /** @type {?} */\n                            var elem = _this._msnry.items[index].element;\n                            _this._onTransitionEnd(observer, elem);\n                            /** @type {?} */\n                            var indx = _this.items.findIndex(function (element) {\n                                return element.dataset.count === item.dataset.count;\n                            });\n                            _this.items.splice(indx, 1);\n                        }, 20);\n                    });\n                    return obsv;\n                }\n                return rxjs.empty();\n            };\n        /**\n         * Remove first grid item from the Masonry List\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.removeFirstItem = /**\n         * Remove first grid item from the Masonry List\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                this.removeAnimation();\n                if (this._msnry.items.length) {\n                    this._msnry.items[0].element.classList.remove('animate');\n                    /** @type {?} */\n                    var obsv = rxjs.Observable.create(function (observer) {\n                        //setTimeout(() => {\n                        //setTimeout(() => {\n                        _this._onTransitionEnd(observer, _this._msnry.items[0].element);\n                        _this.items.splice(0, 1);\n                        //}, 10);\n                    });\n                    return obsv;\n                }\n                return rxjs.empty();\n            };\n        /**\n         * Empty the Masonry list\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.removeAllItems = /**\n         * Empty the Masonry list\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                this.removeAnimation();\n                /** @type {?} */\n                var obsv = rxjs.Observable.create(function (observer) {\n                    setTimeout(function () {\n                        /** @type {?} */\n                        var items = [];\n                        _this._msnry.items.forEach(function (masonryItem, index) {\n                            items.push({ element: masonryItem.element, index: index });\n                            _this.addTransition(masonryItem.element);\n                        });\n                        /** @type {?} */\n                        var elem = _this._msnry.items[_this._msnry.items.length - 1].element;\n                        /** @type {?} */\n                        var transitionEnd = function () {\n                            observer.next(items);\n                            setTimeout(function () {\n                                _this._msnry.reloadItems();\n                                _this._msnry.layout();\n                                _this.items = [];\n                                _this.itemsCount = 0;\n                                _this.itemsRenderedCount = 0;\n                            }, 10);\n                            elem.removeEventListener('transitionend', transitionEnd, false);\n                        };\n                        elem.addEventListener('transitionend', transitionEnd, false);\n                        if (_this.masonryOptions.transitionDuration === \"0\") {\n                            transitionEnd();\n                        }\n                    }, 10);\n                });\n                return obsv;\n            };\n        /**\n         * Add transition effect on DOM Node removal\n         * @param {?} elem\n         * @return {?}\n         */\n        NgMasonryGridService.prototype.addTransition = /**\n         * Add transition effect on DOM Node removal\n         * @param {?} elem\n         * @return {?}\n         */\n            function (elem) {\n                elem.style.transition = 'transform ' + this.masonryOptions.transitionDuration + ', opacity ' + this.masonryOptions.transitionDuration;\n                elem.style.transform = 'scale(0.001)';\n                elem.style.opacity = '0';\n            };\n        /**\n         * On transition End, remove eventListener\n         * @param {?} observer Subscriber<MasonryGridItem>\n         * @param {?} elem\n         * @return {?}\n         */\n        NgMasonryGridService.prototype._onTransitionEnd = /**\n         * On transition End, remove eventListener\n         * @param {?} observer Subscriber<MasonryGridItem>\n         * @param {?} elem\n         * @return {?}\n         */\n            function (observer, elem) {\n                var _this = this;\n                if (elem) {\n                    this.addTransition(elem);\n                    /** @type {?} */\n                    var transitionEnd_1 = function () {\n                        /** @type {?} */\n                        var isindex = Array.prototype.slice.call(_this.el.children).findIndex(function (element) {\n                            return element.getAttribute('data-count') === elem.getAttribute('data-count');\n                        });\n                        if (isindex !== -1) {\n                            observer.next({ element: elem, index: isindex });\n                        }\n                        setTimeout(function () {\n                            _this._msnry.reloadItems();\n                            _this._msnry.layout();\n                        }, 10);\n                        elem.removeEventListener('transitionend', transitionEnd_1, false);\n                    };\n                    elem.addEventListener('transitionend', transitionEnd_1, false);\n                }\n            };\n        NgMasonryGridService.decorators = [\n            { type: core.Injectable },\n        ];\n        /** @nocollapse */\n        NgMasonryGridService.ctorParameters = function () {\n            return [\n                { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }\n            ];\n        };\n        return NgMasonryGridService;\n    }());\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /**\n     * Shailendra Kumar <shailu.snist@gmail.com>\n     * @ignore\n     */\n    var NgMasonryGridComponent = /** @class */ /*@__PURE__*/ (function () {\n        function NgMasonryGridComponent(_platformId, _element, masonryGridService) {\n            this._platformId = _platformId;\n            this._element = _element;\n            this.masonryGridService = masonryGridService;\n            // Inputs\n            this.masonryOptions = {};\n            this.useAnimation = false;\n            this.useImagesLoaded = false;\n            // Outputs\n            this.layoutComplete = new core.EventEmitter();\n            this.removeComplete = new core.EventEmitter();\n            this.onNgMasonryInit = new core.EventEmitter();\n        }\n        /**\n         * @return {?}\n         */\n        NgMasonryGridComponent.prototype.ngOnInit = /**\n         * @return {?}\n         */\n            function () {\n                this._element.nativeElement.classList.add('grid');\n                this.initializeMasonry();\n            };\n        /**\n         * @return {?}\n         */\n        NgMasonryGridComponent.prototype.ngAfterContentInit = /**\n         * @return {?}\n         */\n            function () {\n                // initialize masonry after View Initialization\n                // this.initializeMasonry();\n            };\n        /**\n         * @return {?}\n         */\n        NgMasonryGridComponent.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n            function () {\n                if (this._msnry) {\n                    this._msnry.destroy();\n                    this.masonryGridService.onDestory();\n                }\n            };\n        /**\n         * @return {?}\n         */\n        NgMasonryGridComponent.prototype.layout = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                setTimeout(function () {\n                    _this._msnry.layout();\n                }, 50);\n            };\n        /**\n         * @param {?} element\n         * @return {?}\n         */\n        NgMasonryGridComponent.prototype.remove = /**\n         * @param {?} element\n         * @return {?}\n         */\n            function (element) {\n                this._msnry.remove(element);\n                this.layout();\n            };\n        /**\n         * @param {?} element\n         * @return {?}\n         */\n        NgMasonryGridComponent.prototype.add = /**\n         * @param {?} element\n         * @return {?}\n         */\n            function (element) {\n                this.masonryGridService.add(element);\n            };\n        /**\n         * @return {?}\n         */\n        NgMasonryGridComponent.prototype.initializeMasonry = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                // initialize Masonry with Animation effects\n                this._msnry = this.masonryGridService\n                    .init(this._element.nativeElement, this.masonryOptions, this.useAnimation, this.scrollAnimationOptions, this.useImagesLoaded);\n                // Bind to Masonry events\n                this._msnry.on('layoutComplete', function (items) {\n                    _this.layoutComplete.emit(items);\n                });\n                this._msnry.on('removeComplete', function (items) {\n                    _this.removeComplete.emit(items);\n                });\n                this._msnry.removeAnimation = function () {\n                    _this.masonryGridService.removeAnimation();\n                };\n                this._msnry.setAddStatus = function (value) {\n                    _this.masonryGridService.setAddStatus(value);\n                };\n                this._msnry.removeItem = function (item) {\n                    return _this.masonryGridService.removeItem(item);\n                };\n                this._msnry.removeFirstItem = function () {\n                    return _this.masonryGridService.removeFirstItem();\n                };\n                this._msnry.removeAllItems = function () {\n                    return _this.masonryGridService.removeAllItems();\n                };\n                this._msnry.reOrderItems = function () {\n                    return _this.masonryGridService.reorderMasonryItems();\n                };\n                // emit Masonry Initialization event\n                this.onNgMasonryInit.emit(this._msnry);\n                this.layout();\n            };\n        NgMasonryGridComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: '[ng-masonry-grid], ng-masonry-grid',\n                        template: '<ng-content></ng-content>',\n                        styles: [\n                            \"\\n\\t\\t:host {\\n\\t\\t\\tdisplay: block;\\n\\t\\t}\\n\\t\"\n                        ]\n                    },] },\n        ];\n        /** @nocollapse */\n        NgMasonryGridComponent.ctorParameters = function () {\n            return [\n                { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },\n                { type: core.ElementRef },\n                { type: NgMasonryGridService }\n            ];\n        };\n        NgMasonryGridComponent.propDecorators = {\n            masonryOptions: [{ type: core.Input }],\n            useAnimation: [{ type: core.Input }],\n            scrollAnimationOptions: [{ type: core.Input }],\n            useImagesLoaded: [{ type: core.Input }],\n            layoutComplete: [{ type: core.Output }],\n            removeComplete: [{ type: core.Output }],\n            onNgMasonryInit: [{ type: core.Output }]\n        };\n        return NgMasonryGridComponent;\n    }());\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /**\n     * Shailendra Kumar <shailu.snist@gmail.com>\n     * @ignore\n     */\n    var NgMasonryGridDirective = /** @class */ /*@__PURE__*/ (function () {\n        function NgMasonryGridDirective(_element, _parent, platformId, masonryGridService) {\n            this._element = _element;\n            this._parent = _parent;\n            this.platformId = platformId;\n            this.masonryGridService = masonryGridService;\n        }\n        /**\n         * @return {?}\n         */\n        NgMasonryGridDirective.prototype.ngOnInit = /**\n         * @return {?}\n         */\n            function () {\n                // this._parent.add(this._element.nativeElement);\n            };\n        /**\n         * Add Masonry grid item after view initialization\n         */\n        /**\n         * Add Masonry grid item after view initialization\n         * @return {?}\n         */\n        NgMasonryGridDirective.prototype.ngAfterViewInit = /**\n         * Add Masonry grid item after view initialization\n         * @return {?}\n         */\n            function () {\n                if (common.isPlatformBrowser(this.platformId)) {\n                    this.masonryGridService.itemsCount++;\n                    // set count attribute for every grid item\n                    this._element.nativeElement.setAttribute('data-count', this.masonryGridService.itemsCount);\n                    // if (this.masonryGridService.masonryOptions.horizontalOrder) {\n                    //   this.masonryGridService.addOrderItem(this._element.nativeElement);\n                    // } else {\n                    //   this._parent.add(this._element.nativeElement);\n                    // }\n                    this._parent.add(this._element.nativeElement);\n                    this.watchForHtmlChanges();\n                }\n            };\n        /**\n         * @return {?}\n         */\n        NgMasonryGridDirective.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n            function () {\n            };\n        /**\n         * When HTML in brick changes dynamically, observe that and change layout\n         * @return {?}\n         */\n        NgMasonryGridDirective.prototype.watchForHtmlChanges = /**\n         * When HTML in brick changes dynamically, observe that and change layout\n         * @return {?}\n         */\n            function () {\n                MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n                if (MutationObserver) {\n                    /** *\n                     * Watch for any changes to subtree\n                      @type {?} */\n                    var self_1 = this;\n                    /** @type {?} */\n                    var observer = new MutationObserver(function (mutations, observerFromElement) {\n                        self_1._parent.layout();\n                    });\n                    // define what element should be observed by the observer\n                    // and what types of mutations trigger the callback\n                    observer.observe(this._element.nativeElement, {\n                        subtree: true,\n                        childList: true\n                    });\n                }\n            };\n        NgMasonryGridDirective.decorators = [\n            { type: core.Directive, args: [{\n                        // tslint:disable-next-line:directive-selector\n                        selector: '[ng-masonry-grid-item], ng-masonry-grid-item'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgMasonryGridDirective.ctorParameters = function () {\n            return [\n                { type: core.ElementRef },\n                { type: NgMasonryGridComponent, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return NgMasonryGridComponent; }),] }] },\n                { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },\n                { type: NgMasonryGridService }\n            ];\n        };\n        return NgMasonryGridDirective;\n    }());\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /**\n     * Shailendra Kumar <shailu.snist@gmail.com>\n     * @ignore\n     */\n    var NgMasonryGridModule = /** @class */ /*@__PURE__*/ (function () {\n        function NgMasonryGridModule() {\n        }\n        NgMasonryGridModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        exports: [NgMasonryGridComponent, NgMasonryGridDirective],\n                        declarations: [NgMasonryGridComponent, NgMasonryGridDirective],\n                        providers: [NgMasonryGridService]\n                    },] },\n        ];\n        return NgMasonryGridModule;\n    }());\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /**\n     * Masonry Grid item\n     */\n    var MasonryGridItem = /** @class */ /*@__PURE__*/ (function () {\n        function MasonryGridItem() {\n        }\n        return MasonryGridItem;\n    }());\n    /**\n     * Masonry Options\n     * @record\n     */\n    /**\n     * Masonry Object\n     */\n    var Masonry = /** @class */ /*@__PURE__*/ (function () {\n        function Masonry(selector, options) {\n        }\n        return Masonry;\n    }());\n    /**\n     * Scroll Animation options\n     * @record\n     */\n    /**\n     * interface for an image currently loading or completed\n     * @record\n     */\n    /**\n     * @record\n     */\n    /**\n     * @record\n     */\n    /**\n     * @record\n     */\n    /**\n     * @record\n     */\n    /**\n     * @record\n     */\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    exports.NgMasonryGridModule = NgMasonryGridModule;\n    exports.NgMasonryGridComponent = NgMasonryGridComponent;\n    exports.NgMasonryGridDirective = NgMasonryGridDirective;\n    exports.NgMasonryGridService = NgMasonryGridService;\n    exports.Masonry = Masonry;\n    exports.MasonryGridItem = MasonryGridItem;\n    Object.defineProperty(exports, '__esModule', { value: true });\n})));\n",null]}