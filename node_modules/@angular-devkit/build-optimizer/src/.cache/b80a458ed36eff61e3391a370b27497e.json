{"remainingRequest":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/@angular/fire/firestore/collection/collection.js","dependencies":[{"path":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/@angular/fire/firestore/collection/collection.js","mtime":499162500000},{"path":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sportssocialweb/Desktop/SportSocialWebsite/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1535052364000}],"contextDependencies":[],"result":["import { from } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { map, filter, scan } from 'rxjs/operators';\nimport { docChanges, sortedChanges } from './changes';\nimport { AngularFirestoreDocument } from '../document/document';\nimport { runInZone } from '@angular/fire';\nexport function validateEventsArray(events) {\n    if (!events || events.length === 0) {\n        events = ['added', 'removed', 'modified'];\n    }\n    return events;\n}\nvar AngularFirestoreCollection = /*@__PURE__*/ (function () {\n    function AngularFirestoreCollection(ref, query, afs) {\n        this.ref = ref;\n        this.query = query;\n        this.afs = afs;\n    }\n    AngularFirestoreCollection.prototype.stateChanges = function (events) {\n        if (!events || events.length === 0) {\n            return this.afs.scheduler.keepUnstableUntilFirst(this.afs.scheduler.runOutsideAngular(docChanges(this.query)));\n        }\n        return this.afs.scheduler.keepUnstableUntilFirst(this.afs.scheduler.runOutsideAngular(docChanges(this.query)))\n            .pipe(map(function (actions) { return actions.filter(function (change) { return events.indexOf(change.type) > -1; }); }), filter(function (changes) { return changes.length > 0; }));\n    };\n    AngularFirestoreCollection.prototype.auditTrail = function (events) {\n        return this.stateChanges(events).pipe(scan(function (current, action) { return current.concat(action); }, []));\n    };\n    AngularFirestoreCollection.prototype.snapshotChanges = function (events) {\n        var validatedEvents = validateEventsArray(events);\n        var sortedChanges$ = sortedChanges(this.query, validatedEvents);\n        var scheduledSortedChanges$ = this.afs.scheduler.runOutsideAngular(sortedChanges$);\n        return this.afs.scheduler.keepUnstableUntilFirst(scheduledSortedChanges$);\n    };\n    AngularFirestoreCollection.prototype.valueChanges = function () {\n        var fromCollectionRef$ = fromCollectionRef(this.query);\n        var scheduled$ = this.afs.scheduler.runOutsideAngular(fromCollectionRef$);\n        return this.afs.scheduler.keepUnstableUntilFirst(scheduled$)\n            .pipe(map(function (actions) { return actions.payload.docs.map(function (a) { return a.data(); }); }));\n    };\n    AngularFirestoreCollection.prototype.get = function (options) {\n        return from(this.query.get(options)).pipe(runInZone(this.afs.scheduler.zone));\n    };\n    AngularFirestoreCollection.prototype.add = function (data) {\n        return this.ref.add(data);\n    };\n    AngularFirestoreCollection.prototype.doc = function (path) {\n        return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\n    };\n    return AngularFirestoreCollection;\n}());\nexport { AngularFirestoreCollection };\n//# sourceMappingURL=collection.js.map\n",null]}